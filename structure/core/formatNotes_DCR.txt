The following specifications are specific to the DCR format:

DCR chunk {
	FourCC ID
	Varint length
	<length> bytes data // DCR chunks do not appear to be byte-aligned
	/*
		WARNING!
		The root chunk in a DCR is still a RIFX/XFIR chunk
		It follows the expected pattern of
		FourCC ID, length, FourCC FORMID, data
	*/	
}

Fver
{
	5 bytes unknown (binary representation of version, maybe?)
	String fileVersion (written as byte length followed by string)
}

Fcdr
{
	/*
		contains ziplib compressed data
		is just strings for if there was an error like "Missing Xtra" etc.

		possibly is more than just strings
		first 48 bytes *might* be GUIDS
		then it's three null-terminated strings
		NOT YET CONFIRMED

		Exact purpose/reasoning for this chunk is still questionable
		It is completely safe to ignore reading this chunk
	*/
	
}

ABMP
{
	// "A[fter]B[urner]M[a]P"
	/*
	Similar to mmap, but using varints
	
	A varint is an int that can be any number of bytes long.
	This is accomplished by the first bit of every byte
	representing whether the next byte is part of the number
	or not. For example:
	
	
	0x19 is the same in both representations.
	
	Normal:    00011001
	As varint: 00011001
	
	
	0xE1 is different as a varint
	
	Normal:             1110 0001
	As varint: 10000001 0110 0001
	
	Notice how with 0xE1, what is normally the first bit
	became the last bit of the first byte, because in
	a varint, the first bit of each byte says whether
	or not another byte will follow.
	
	With that said, the format of ABMP is as follows:
	varint id
	varint offset // this refers to the FGEI section
	varint compressed_size
	varint decompressed_size
	varint repr_mode (not sure what this does, just the name according to Schockabsorber)
	fourcc chunkID
	*/
	//TODO : cover missing information
}

FGEI
{
	/*
		Compressed zlib data.
		Contains all the sections referenced in ABMP.
		Note that this doesn't use RIFX at all, it depends
		on the ABMP section to lay it out, so
		there's no redundant information like how mmap
		repeats the name and length of each section.
	*/
	// technically, the 'chunk' is 0 bytes in length and just acts as a marker
}

ILS {
	// "I[nitial] L[oad] S[egment]"
	/*
		The first file in FGEI (as thus far observed), 
		it contains all the chunks that must be loaded first,
		Reading it absolutely depends on the ABMP
	*/
	Array [
		{
			varint ID // same as the ID property in ABMP entries
			Byte[] chunkdata // ABMP has the length, as well
		}
	]	
}

// FAKE NEWS, DCR DOES NOT NEED/HAVE A MMAP, IT HAS ABMP FOR THIS...
// where'd this come from, anyways???
mmap
{
  /* 
  in DCR, this is the contents of the second extracted file, 
  and describes the third extracted file, but it seems to be arranged differently, 
  where the list of chunks is seperated by null terminator 0xFFFFFF7F, 
  and the section name starts with 0x00, I can't see where the length comes from.
  Otherwise, format is same as MMAP for DXR and DIR (see formatNotes)
  */
}